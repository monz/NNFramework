classdef Util
    %UTIL Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
    end
    
    methods (Static)
        function x = logsig(n)
            x = 1 ./ (1 + exp(-n));
        end
        
        function x = linear(n)
            x = n;
        end
        
        function [output, settings] = mymapminmax(inpu, varargin)
            % ymin/ymax default settings
            ymin = -1;
            ymax = 1;
            % ymin/ymax user settings
            if (nargin == 3) && isnumeric(varargin{1}) && isnumeric(varargin{2})
                ymin = varargin{1};
                ymax = varargin{2};
            end
            
            xrows = size(x,1);
            if isempty(x)
                x = nan(xrows,1);
            end
            xmin = min(x,[],2);
            xmax = max(x,[],2);
            % set all min/max NaN to -inf/inf
            xmin(isnan(xmin)) = -inf;
            xmax(isnan(xmax)) = inf;

            % Assert: xmin and xmax will be [-inf inf] for unknown ranges
            settings.name = 'mymapminmax';
            settings.xrows = xrows;
            settings.xmax = xmax;
            settings.xmin = xmin;
            settings.xrange = xmax - xmin;
            settings.yrows = settings.xrows;
            settings.ymax = ymax;
            settings.ymin = ymin;
            settings.yrange = settings.ymax - settings.ymin;

            % Convert from settings values to safe processing values
            % and check whether safe values result in x<->y change.
            xoffset = settings.xmin;
            gain = settings.yrange ./ settings.xrange;
            fix = find((abs(gain)>1e14) | ~isfinite(settings.xrange) | (settings.xrange == 0));
            gain(fix) = 1;
            xoffset(fix) = settings.ymin;
            settings.no_change = (settings.xrows == 0) || (all(gain == 1) && all(xmin == 0));

            settings.gain = gain;
            settings.xoffset = xoffset;

            output = mapminmax.apply(x,settings); 
        end
    end
    
end

